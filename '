"use client";
import { Card } from "@/components/ui/card";
import { ReactNode, useRef, useEffect } from "react";

type Dimensions = {
  width: number;
  height: number;
  defaultMax?: boolean;
}

type ActionCallback = (windowTitle: string) => void;

export type WindowContext = {
  enterCallback: ActionCallback;
}

type Props = {
  title: string;
  dimensions: Dimensions;
  ctx: WindowContext;
  children: ReactNode;
}

type MouseEventCallback = (e: MouseEvent) => void;

export function Window({ title, dimensions, ctx, children }: Props) {
  const windowRef = useRef<HTMLDivElement>(null);

  if (typeof dimensions?.defaultMax === undefined) {
    dimensions.defaultMax = false;
  }

  let movingWindow = false;
  let movingDisabled = false;
  let windowWidth = 0;
  let windowHeight = 0;
  let screenWidth = 0;
  let screenHeight = 0;
  let mouseOffsetY = 0;
  let mouseOffsetX = 0;
  let maximized = dimensions.defaultMax;

  const style = {
    width: dimensions.width + "px",
    height: dimensions.height + "px",
    top: Math.round(dimensions.height / 2) + "px",
    left: Math.round(dimensions.width / 2) + "px",
  }

  // let resizingWindow = false;

  let clicks = 0;
  const clickTimeout = 250;

  function incrementClicks() {
    clicks += 1;
    setTimeout(() => {
      clicks -= 1;
      if (clicks < 0) {
        clicks = 0;
      }
    }, clickTimeout)
  }

  // TODO: make resizable and moveable
  function enableMoving(e: MouseEvent) {
    if (typeof window === undefined) {
      return;
    }

    if (!windowRef?.current) {
      return;
    }

    incrementClicks();

    if (clicks >= 2) {
      toggleWindowSize();
    }

    movingWindow = true;
    const boundingRect = windowRef.current.getBoundingClientRect();
    windowWidth = boundingRect.width;
    windowHeight = boundingRect.height;
    screenWidth = window.innerWidth;
    screenHeight = window.innerHeight;

    const currTop = windowRef.current.offsetTop;
    const currLeft = windowRef.current.offsetLeft;

    mouseOffsetY = e.clientY - currTop;
    mouseOffsetX = e.clientX - currLeft;
  }

  function moveWindow(e: MouseEvent) {
    if (!windowRef?.current) {
      return;
    }
    if (!movingWindow || movingDisabled) {
      return;
    }
    e.preventDefault();

    const currTop = windowRef.current.offsetTop;
    const currLeft = windowRef.current.offsetLeft;

    const clientX = e.clientX;
    const clientY = e.clientY;

    let newTop = clientY - mouseOffsetY;
    let newLeft = clientX - mouseOffsetX;

    if (newTop < 0) {
      newTop = 0;
      mouseOffsetY = e.clientY - currTop;
    }
    if (newTop > screenHeight - windowHeight) {
      newTop = screenHeight - windowHeight;
      mouseOffsetY = e.clientY - currTop;
    }
    if (newLeft < 0) {
      newLeft = 0;
      mouseOffsetX = e.clientX - currLeft;
    }
    if (newLeft > screenWidth - windowWidth) {
      newLeft = screenWidth - windowWidth;
      mouseOffsetX = e.clientX - currLeft;
    }

    windowRef.current.style.top = newTop + "px";
    windowRef.current.style.left = newLeft + "px";
  }

  function disableMoving() {
    movingWindow = false;
  }

  function toggleWindowSize() {
    if (!windowRef?.current) {
      return;
    }

    windowRef.current.style.transition = "all 250ms ease";
    movingDisabled = true;
    clicks = 0;
    setTimeout(() => {
      if (!windowRef?.current) {
        return;
      }
      windowRef.current.style.transition = "";
      movingDisabled = false;
    }, 250);
    if (maximized) {
      minimizeWindow();
    } else {
      maximizeWindow();
    }
    maximized = !maximized;
  }

  function minimizeWindow() {
    if (!windowRef?.current) {
      return;
    }
    windowRef.current.style.width = dimensions.width + "";
    windowRef.current.style.height = dimensions.height + "";
    windowRef.current.style.top = (dimensions.height / 2) + "";
    windowRef.current.style.left = (dimensions.width / 2) + "";
  }

  function maximizeWindow() {
    if (!windowRef?.current) {
      return;
    }
    windowRef.current.style.width = "100%";
    windowRef.current.style.height = "100%";
    windowRef.current.style.top = "0";
    windowRef.current.style.left = "0";
  }

  // function enableResize(e) {
  //   resizingWindow = true;
  //
  //   const boundingRect = windowRef.current.getBoundingClientRect();
  //   windowHeight = boundingRect.height;
  //   screenHeight = window.innerHeight;
  //
  //   const currTop = windowRef.current.offsetTop;
  //
  //   mouseOffsetY = e.clientY - currTop;
  // }
  // function disableResize(e) {
  //   resizingWindow = false;
  // }
  //
  // function resizeDown(e) {
  //   if (!resizingWindow) {
  //     return;
  //   }
  //
  //   e.preventDefault();
  //   const currTop = windowRef.current.offsetTop;
  //
  //   let movementY = e.movementY;
  //
  //   const newWindowHeight = windowHeight + movementY;
  //   console.log("newWindowheight:", newWindowHeight);
  //   if (currTop + newWindowHeight > screenHeight - newWindowHeight) {
  //     console.log("too tall")
  //     return;
  //   }
  //
  //   windowHeight = newWindowHeight;
  //
  //   windowRef.current.style.height = windowHeight + "px";
  // }
  //

  let prevTouch: Touch;
  let firstTouch: Touch;
  let touching = false;

  function onTouchStart(e: TouchEvent, callback: MouseEventCallback) {
    console.log("touchstart")
    if (touching) {
      return;
    }

    touching = true;
    firstTouch = e.touches[0];
    prevTouch = firstTouch;

    const clientX = firstTouch.clientX;
    const clientY = firstTouch.clientY;
    const movementX = firstTouch.pageX - prevTouch.pageX;
    const movementY = firstTouch.pageY - prevTouch.pageY;

    const mouseEvent = new MouseEvent('mousedown', {
      bubbles: true,
      cancelable: true,
      clientX: clientX,
      clientY: clientY,
      movementX: movementX,
      movementY: movementY
    })

    callback(mouseEvent);
  }

  function onTouchMove(e: TouchEvent, callback: MouseEventCallback) {
    const newTouch = e.touches[0];

    const clientX = newTouch.clientX;
    const clientY = newTouch.clientY;
    const movementX = newTouch.pageX - prevTouch.pageX;
    const movementY = newTouch.pageY - prevTouch.pageY;

    const mouseEvent = new MouseEvent('mousemove', {
      bubbles: true,
      cancelable: true,
      clientX: clientX,
      clientY: clientY,
      movementX: movementX,
      movementY: movementY
    })

    callback(mouseEvent);

    prevTouch = newTouch;
  }

  function onTouchEnd(callback: MouseEventCallback) {
    const mouseEvent = new MouseEvent('mouseup', {
      bubbles: true,
      cancelable: true,
    })
    callback(mouseEvent);
    touching = false;
  }
  useEffect(() => {
    if (typeof window === undefined) {
      return;
    }

    window.addEventListener("mouseup", disableMoving);
    window.addEventListener("mouseleave", disableMoving);
    window.addEventListener("mousemove", moveWindow);
    window.addEventListener("touchend", () => onTouchEnd(disableMoving));
    window.addEventListener("touchcancel", () => onTouchEnd(disableMoving));
    window.addEventListener("touchmove", (e) => onTouchMove(e, moveWindow));
  }, []);

  return (
    <div ref={windowRef}
      style={style}
      className={`absolute flex flex-col ${maximized ? 'w-full h-full left-0 top-0' : ""}`}
      onMouseDown={() => ctx.enterCallback(title)}
    >
      <div className="select-none w-full h-6 rounded-t-lg border-slate-600 bg-slate-600 py-auto flex ">
        <button className="w-3 h-3 rounded-full bg-red-700 my-auto mx-1"></button>
        <button className="w-3 h-3 rounded-full bg-yellow-700 my-auto mx-1"></button>
        <button className="w-3 h-3 rounded-full bg-green-700 my-auto mx-1" onMouseUp={toggleWindowSize}></button>
        <div className="z-10 w-full h-full cursor-grab active:cursor-grabbing" onMouseDown={(e: React.MouseEvent) => enableMoving(e.nativeEvent)}
          onTouchStart={(e: React.TouchEvent) => onTouchStart(e.nativeEvent, enableMoving)}>
        </div>
        <p className="z-0 absolute w-min left-0 right-0 mx-auto">{title}</p>
      </div>
      <Card className="w-full h-full bg-slate-900 rounded-t-none border-slate-600 shadow-slate-500 text-white bg-opacity-40 overflow-hidden">
        {children}
      </Card>
    </div>

  )
}

{/* <div className="select-none absolute mx-auto left-0 right-0 -top-[4px] w-5/6 h-[4px] bg-blue-400 cursor-s-resize"></div> */ }
{/* <div className="select-none absolute mx-auto left-0 right-0 top-[600px] w-5/6 h-[4px] bg-blue-400 cursor-n-resize" onMouseDown={enableResize}></div> */ }
